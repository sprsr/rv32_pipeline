$date
	Sun Nov 12 21:54:22 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module reg_tb $end
$var wire 32 ! r_dataB [31:0] $end
$var wire 32 " r_dataA [31:0] $end
$var reg 1 # clk $end
$var reg 5 $ r_addrA [4:0] $end
$var reg 5 % r_addrB [4:0] $end
$var reg 5 & r_addrD [4:0] $end
$var reg 32 ' r_dataD [31:0] $end
$var reg 1 ( r_regWEn $end
$var reg 1 ) reset $end
$scope module reg_0 $end
$var wire 5 * addrA [4:0] $end
$var wire 5 + addrB [4:0] $end
$var wire 5 , addrD [4:0] $end
$var wire 1 # clk $end
$var wire 32 - dataA [31:0] $end
$var wire 32 . dataB [31:0] $end
$var wire 32 / dataD [31:0] $end
$var wire 1 ( regWEn $end
$var wire 1 ) rst $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /
bx .
bx -
bx ,
bx +
bx *
1)
x(
bx '
bx &
bx %
bx $
0#
bx "
bx !
$end
#5
1#
#10
0#
0)
#15
1#
#20
0(
b11001 !
b11001 .
b10011 %
b10011 +
b111 "
b111 -
b111 $
b111 *
0#
#25
1#
#30
b10001 !
b10001 .
b1011 %
b1011 +
b1000 "
b1000 -
b1000 $
b1000 *
0#
#35
1#
#40
1(
b111 "
b111 -
b111 $
b111 *
b100 &
b100 ,
b1000 '
b1000 /
0#
#45
1#
#50
0(
b1000 "
b1000 -
b100 $
b100 *
0#
#55
1#
#60
0#
#65
1#
#70
0#
#75
1#
#80
0#
#85
1#
#90
0#
#95
1#
#100
0#
#105
1#
#110
0#
#115
1#
#120
0#
#125
1#
#130
0#
#135
1#
#140
0#
#145
1#
#150
0#
#155
1#
#160
0#
#165
1#
#170
0#
#175
1#
#180
0#
#185
1#
#190
0#
#195
1#
#200
0#
#205
1#
#210
0#
#215
1#
#220
0#
#225
1#
#230
0#
#235
1#
#240
0#
#245
1#
#250
0#
