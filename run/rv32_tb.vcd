$date
	Sat Nov 18 01:28:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module rv32_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module c0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # w_brUn $end
$var wire 1 $ w_mem_rw $end
$var wire 1 % w_regWEn $end
$var wire 1 & w_sel_pc $end
$var wire 32 ' w_wr_back [31:0] $end
$var wire 2 ( w_wb_sel [1:0] $end
$var wire 1 ) w_sign $end
$var wire 32 * w_reg_data_B [31:0] $end
$var wire 32 + w_reg_data_A [31:0] $end
$var wire 1 , w_pc_sel $end
$var wire 32 - w_pc_4 [31:0] $end
$var wire 32 . w_pc [31:0] $end
$var wire 32 / w_instruction [31:0] $end
$var wire 32 0 w_immediate [31:0] $end
$var wire 4 1 w_imm_sel [3:0] $end
$var wire 32 2 w_dmem_out [31:0] $end
$var wire 1 3 w_brLT $end
$var wire 1 4 w_brEq $end
$var wire 1 5 w_b_sel $end
$var wire 1 6 w_alu_zero_flag $end
$var wire 4 7 w_alu_sel [3:0] $end
$var wire 32 8 w_alu_out [31:0] $end
$var wire 32 9 w_alu_in_B [31:0] $end
$var wire 32 : w_alu_in_A [31:0] $end
$var wire 1 ; w_a_sel $end
$var wire 1 < w_BrUn $end
$scope module inst_alu $end
$var wire 1 ) sign $end
$var wire 32 = i_2 [31:0] $end
$var wire 32 > i_1 [31:0] $end
$var wire 4 ? aluSel [3:0] $end
$var reg 32 @ r_operand_2_converted [31:0] $end
$var reg 32 A result [31:0] $end
$var reg 1 6 zero_flag $end
$upscope $end
$scope module inst_branch_comp $end
$var wire 1 4 brEq $end
$var wire 1 3 brLT $end
$var wire 1 # brUn $end
$var wire 32 B i_dataB [31:0] $end
$var wire 32 C i_dataA [31:0] $end
$var reg 1 D r_Eq $end
$var reg 1 E r_LT $end
$upscope $end
$scope module inst_control $end
$var wire 1 F BrEq $end
$var wire 1 $ MemRW $end
$var wire 1 % RegWEn $end
$var wire 1 4 brEq $end
$var wire 1 3 brLT $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 G w_instr_wb [31:0] $end
$var wire 32 H w_instr_exe [31:0] $end
$var wire 32 I w_instr_acc [31:0] $end
$var wire 1 ) sign $end
$var wire 1 , pcSel $end
$var wire 32 J inst [31:0] $end
$var wire 2 K WBSel [1:0] $end
$var wire 4 L ImmSel [3:0] $end
$var wire 1 < BrUn $end
$var wire 1 5 BSel $end
$var wire 1 ; ASel $end
$var wire 4 M ALUSel [3:0] $end
$scope module inst_access_ctl $end
$var wire 1 $ MemRW $end
$var wire 1 ! clk $end
$var wire 32 N instr_wb [31:0] $end
$var wire 1 " rst $end
$var wire 32 O instruction [31:0] $end
$var reg 32 P r_instr_wb [31:0] $end
$var reg 1 Q r_mem_wr $end
$upscope $end
$scope module inst_decode_ctl $end
$var wire 1 ! clk $end
$var wire 4 R immSel [3:0] $end
$var wire 32 S instr_exe [31:0] $end
$var wire 1 " rst $end
$var wire 32 T instruction [31:0] $end
$var reg 4 U r_immSel [3:0] $end
$var reg 32 V r_instr_exe [31:0] $end
$upscope $end
$scope module inst_execute_ctl $end
$var wire 1 F BrEq $end
$var wire 1 3 BrLT $end
$var wire 1 < BrUn $end
$var wire 1 ; a_sel $end
$var wire 4 W alu_sel [3:0] $end
$var wire 1 5 b_sel $end
$var wire 1 ! clk $end
$var wire 32 X instr_acc [31:0] $end
$var wire 32 Y instruction [31:0] $end
$var wire 1 , pc_sel $end
$var wire 1 " rst $end
$var wire 1 ) sign $end
$var reg 1 Z r_BrUn $end
$var reg 1 [ r_a_sel $end
$var reg 4 \ r_alu_sel [3:0] $end
$var reg 1 ] r_b_sel $end
$var reg 32 ^ r_instr_acc [31:0] $end
$var reg 1 _ r_pc_sel $end
$var reg 1 ` r_sign $end
$upscope $end
$scope module inst_wb_ctl $end
$var wire 1 ! clk $end
$var wire 32 a instruction [31:0] $end
$var wire 1 " rst $end
$var wire 2 b wb_sel [1:0] $end
$var reg 2 c r_wb_sel [1:0] $end
$upscope $end
$upscope $end
$scope module inst_debug $end
$var wire 32 d reg0 [31:0] $end
$var wire 32 e reg1 [31:0] $end
$var wire 32 f reg10 [31:0] $end
$var wire 32 g reg11 [31:0] $end
$var wire 32 h reg12 [31:0] $end
$var wire 32 i reg13 [31:0] $end
$var wire 32 j reg14 [31:0] $end
$var wire 32 k reg15 [31:0] $end
$var wire 32 l reg16 [31:0] $end
$var wire 32 m reg17 [31:0] $end
$var wire 32 n reg18 [31:0] $end
$var wire 32 o reg19 [31:0] $end
$var wire 32 p reg2 [31:0] $end
$var wire 32 q reg20 [31:0] $end
$var wire 32 r reg21 [31:0] $end
$var wire 32 s reg22 [31:0] $end
$var wire 32 t reg23 [31:0] $end
$var wire 32 u reg24 [31:0] $end
$var wire 32 v reg25 [31:0] $end
$var wire 32 w reg26 [31:0] $end
$var wire 32 x reg27 [31:0] $end
$var wire 32 y reg28 [31:0] $end
$var wire 32 z reg29 [31:0] $end
$var wire 32 { reg3 [31:0] $end
$var wire 32 | reg30 [31:0] $end
$var wire 32 } reg31 [31:0] $end
$var wire 32 ~ reg4 [31:0] $end
$var wire 32 !" reg5 [31:0] $end
$var wire 32 "" reg6 [31:0] $end
$var wire 32 #" reg7 [31:0] $end
$var wire 32 $" reg8 [31:0] $end
$var wire 32 %" reg9 [31:0] $end
$var wire 1 &" reg_9 $end
$var wire 1 '" reg_8 $end
$var wire 1 (" reg_7 $end
$var wire 1 )" reg_6 $end
$var wire 1 *" reg_5 $end
$var wire 1 +" reg_4 $end
$var wire 1 ," reg_31 $end
$var wire 1 -" reg_30 $end
$var wire 1 ." reg_3 $end
$var wire 1 /" reg_29 $end
$var wire 1 0" reg_28 $end
$var wire 1 1" reg_27 $end
$var wire 1 2" reg_26 $end
$var wire 1 3" reg_25 $end
$var wire 1 4" reg_24 $end
$var wire 1 5" reg_23 $end
$var wire 1 6" reg_22 $end
$var wire 1 7" reg_21 $end
$var wire 1 8" reg_20 $end
$var wire 1 9" reg_2 $end
$var wire 1 :" reg_19 $end
$var wire 1 ;" reg_18 $end
$var wire 1 <" reg_17 $end
$var wire 1 =" reg_16 $end
$var wire 1 >" reg_15 $end
$var wire 1 ?" reg_14 $end
$var wire 1 @" reg_13 $end
$var wire 1 A" reg_12 $end
$var wire 1 B" reg_11 $end
$var wire 1 C" reg_10 $end
$var wire 1 D" reg_1 $end
$var wire 1 E" reg_0 $end
$upscope $end
$scope module inst_dmem $end
$var wire 1 ! clk $end
$var wire 32 F" i_addr [31:0] $end
$var wire 1 $ memRW $end
$var wire 32 G" o_data [31:0] $end
$var wire 1 " rst $end
$var wire 32 H" dataW [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 I" i [31:0] $end
$upscope $end
$upscope $end
$scope module inst_imem $end
$var wire 32 J" o_data [31:0] $end
$var wire 32 K" i_addr [31:0] $end
$upscope $end
$scope module inst_immGen $end
$var wire 4 L" immSel [3:0] $end
$var wire 32 M" immediate [31:0] $end
$var wire 25 N" instr [24:0] $end
$var reg 32 O" r_immediate [31:0] $end
$upscope $end
$scope module inst_mux2x1_A $end
$var wire 1 ; sel $end
$var wire 32 P" b [31:0] $end
$var wire 32 Q" a [31:0] $end
$var reg 32 R" y [31:0] $end
$upscope $end
$scope module inst_mux2x1_B $end
$var wire 32 S" a [31:0] $end
$var wire 1 5 sel $end
$var wire 32 T" b [31:0] $end
$var reg 32 U" y [31:0] $end
$upscope $end
$scope module inst_mux3x1_wb $end
$var wire 32 V" b [31:0] $end
$var wire 32 W" c [31:0] $end
$var wire 2 X" sel [1:0] $end
$var wire 32 Y" a [31:0] $end
$var reg 32 Z" y [31:0] $end
$upscope $end
$scope module inst_pc $end
$var wire 1 ! clk $end
$var wire 32 [" in_alu [31:0] $end
$var wire 32 \" in_pc [31:0] $end
$var wire 32 ]" pc_nxt [31:0] $end
$var wire 1 " rst $end
$var wire 1 & sel_pc $end
$var wire 32 ^" pc [31:0] $end
$var reg 32 _" w_pc [31:0] $end
$var reg 32 `" w_pc_nxt [31:0] $end
$upscope $end
$scope module inst_register $end
$var wire 5 a" addrA [4:0] $end
$var wire 5 b" addrB [4:0] $end
$var wire 5 c" addrD [4:0] $end
$var wire 1 ! clk $end
$var wire 32 d" dataA [31:0] $end
$var wire 32 e" dataB [31:0] $end
$var wire 32 f" dataD [31:0] $end
$var wire 1 % regWEn $end
$var wire 1 " rst $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
b0 I"
bx H"
bx G"
bx F"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bz a
x`
x_
bx ^
x]
bx \
x[
xZ
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
xQ
bx P
bx O
bz N
bx M
bx L
bx K
bx J
bx I
bx H
bz G
zF
xE
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
x;
bx :
bx 9
bx 8
bx 7
x6
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
bx *
x)
bx (
bx '
z&
z%
z$
z#
0"
0!
$end
#5
0,
0_
0<
0Z
b0 7
b0 ?
b0 M
b0 W
b0 \
05
0]
0;
0[
0Q
b0 (
b0 K
b0 b
b0 X"
b0 c
06
0)
0`
1!
#10
16
b0 8
b0 A
b0 F"
b0 V"
b0 ["
b0 9
b0 =
b0 U"
03
0E
14
1D
b0 0
b0 M"
b0 S"
b0 O"
b10 :
b10 >
b10 R"
1,"
0-"
1/"
00"
11"
02"
13"
04"
15"
06"
17"
08"
1:"
0;"
1<"
0="
1>"
0?"
1@"
0A"
1B"
0C"
1&"
0'"
1("
0)"
1*"
0+"
1."
09"
1D"
0E"
b10 *
b10 B
b10 H"
b10 T"
b10 e"
b0 b"
b10 +
b10 C
b10 P"
b10 d"
b0 a"
b1 c"
b1 N"
b110001 }
b110000 |
b101001 z
b101000 y
b100111 x
b100110 w
b100101 v
b100100 u
b100011 t
b100010 s
b100001 r
b100000 q
b11001 o
b11000 n
b10111 m
b10110 l
b10101 k
b10100 j
b10011 i
b10010 h
b10001 g
b10000 f
b1001 %"
b1000 $"
b111 #"
b110 ""
b101 !"
b100 ~
b11 {
b10 p
b1 e
b10 d
b0 -
b0 Y"
b0 \"
b0 ]"
b0 `"
b10110011 /
b10110011 J
b10110011 T
b10110011 J"
b0 .
b0 K"
b0 Q"
b0 ^"
b0 _"
b0 P
b0 I
b0 O
b0 X
b0 ^
x<
xZ
b110 7
b110 ?
b110 M
b110 W
b110 \
15
1]
b0 H
b0 S
b0 Y
b0 V
b100 1
b100 L
b100 R
b100 L"
b100 U
0!
1"
#15
b0 '
b0 Z"
b0 f"
b0 2
b0 G"
b0 W"
b10000000000 I"
1!
#20
0!
#22
0"
#25
06
b10 8
b10 A
b10 F"
b10 V"
b10 ["
b10 9
b10 =
b10 U"
0<
0Z
b0 7
b0 ?
b0 M
b0 W
b0 \
05
0]
b0 1
b0 L
b0 R
b0 L"
b0 U
b10110011 H
b10110011 S
b10110011 Y
b10110011 V
b1 -
b1 Y"
b1 \"
b1 ]"
b1 `"
1!
#30
0!
#35
b100000 0
b100000 M"
b100000 S"
b100000 O"
04
0D
b1 1
b1 L
b1 R
b1 L"
b1 U
b10000001000000001010010011 H
b10000001000000001010010011 S
b10000001000000001010010011 Y
b10000001000000001010010011 V
b10110011 I
b10110011 O
b10110011 X
b10110011 ^
b11 7
b11 ?
b11 M
b11 W
b11 \
06
b1010 8
b1010 A
b1010 F"
b1010 V"
b1010 ["
b1000 :
b1000 >
b1000 R"
b1000 +
b1000 C
b1000 P"
b1000 d"
b1000 a"
b101 c"
b1000000100000000101 N"
b10 -
b10 Y"
b10 \"
b10 ]"
b10 `"
b10000001000000001010010011 /
b10000001000000001010010011 J
b10000001000000001010010011 T
b10000001000000001010010011 J"
b1 .
b1 K"
b1 Q"
b1 ^"
b1 _"
1!
#40
0!
#45
b101000 8
b101000 A
b101000 F"
b101000 V"
b101000 ["
b100000 9
b100000 =
b100000 U"
b10110011 P
b10000001000000001010010011 I
b10000001000000001010010011 O
b10000001000000001010010011 X
b10000001000000001010010011 ^
1)
1`
15
1]
b11 -
b11 Y"
b11 \"
b11 ]"
b11 `"
b10 .
b10 K"
b10 Q"
b10 ^"
b10 _"
1!
#50
0!
#55
b0 9
b0 =
b0 U"
13
1E
b0 0
b0 M"
b0 S"
b0 O"
b10 1
b10 L
b10 R
b10 L"
b10 U
b100000010010000000100011 H
b100000010010000000100011 S
b100000010010000000100011 Y
b100000010010000000100011 V
b10000001000000001010010011 P
b10 8
b10 A
b10 F"
b10 V"
b10 ["
b10 :
b10 >
b10 R"
b1000 *
b1000 B
b1000 H"
b1000 T"
b1000 e"
b1000 b"
b10 +
b10 C
b10 P"
b10 d"
b10 a"
b0 c"
b10000001001000000 N"
1)
1`
b100 -
b100 Y"
b100 \"
b100 ]"
b100 `"
b100000010010000000100011 /
b100000010010000000100011 J
b100000010010000000100011 T
b100000010010000000100011 J"
b11 .
b11 K"
b11 Q"
b11 ^"
b11 _"
1!
#60
0!
#65
03
0E
14
1D
b100000010010000000100011 I
b100000010010000000100011 O
b100000010010000000100011 X
b100000010010000000100011 ^
b10 *
b10 B
b10 H"
b10 T"
b10 e"
b0 b"
b0 a"
b0 N"
b101 -
b101 Y"
b101 \"
b101 ]"
b101 `"
b0 /
b0 J
b0 T
b0 J"
b100 .
b100 K"
b100 Q"
b100 ^"
b100 _"
1)
1`
1!
#70
0!
#75
b0 H
b0 S
b0 Y
b0 V
b100000010010000000100011 P
1Q
1)
1`
b110 -
b110 Y"
b110 \"
b110 ]"
b110 `"
b101 .
b101 K"
b101 Q"
b101 ^"
b101 _"
1!
#80
0!
#85
b10 9
b10 =
b10 U"
b0 I
b0 O
b0 X
b0 ^
b0 7
b0 ?
b0 M
b0 W
b0 \
05
0]
b111 -
b111 Y"
b111 \"
b111 ]"
b111 `"
b110 .
b110 K"
b110 Q"
b110 ^"
b110 _"
0)
0`
1!
#90
0!
#95
b0 P
0Q
b1000 -
b1000 Y"
b1000 \"
b1000 ]"
b1000 `"
b111 .
b111 K"
b111 Q"
b111 ^"
b111 _"
1!
#100
0!
#105
b1001 -
b1001 Y"
b1001 \"
b1001 ]"
b1001 `"
b1000 .
b1000 K"
b1000 Q"
b1000 ^"
b1000 _"
1!
#110
0!
#115
04
0D
b0xxxxxxxxxxxx 0
b0xxxxxxxxxxxx M"
b0xxxxxxxxxxxx S"
b0xxxxxxxxxxxx O"
bx H
bx S
bx Y
bx V
bx '
bx Z"
bx f"
bx 2
bx G"
bx W"
bx 8
bx A
bx F"
bx V"
bx ["
bx 9
bx =
bx U"
bx :
bx >
bx R"
bx *
bx B
bx H"
bx T"
bx e"
bx b"
bx +
bx C
bx P"
bx d"
bx a"
bx c"
bx N"
b1010 -
b1010 Y"
b1010 \"
b1010 ]"
b1010 `"
bx /
bx J
bx T
bx J"
b1001 .
b1001 K"
b1001 Q"
b1001 ^"
b1001 _"
1!
#120
0!
#125
bx I
bx O
bx X
bx ^
b1011 -
b1011 Y"
b1011 \"
b1011 ]"
b1011 `"
b1010 .
b1010 K"
b1010 Q"
b1010 ^"
b1010 _"
1!
#130
0!
#135
bx P
b1100 -
b1100 Y"
b1100 \"
b1100 ]"
b1100 `"
b1011 .
b1011 K"
b1011 Q"
b1011 ^"
b1011 _"
1!
#140
0!
#145
b1101 -
b1101 Y"
b1101 \"
b1101 ]"
b1101 `"
b1100 .
b1100 K"
b1100 Q"
b1100 ^"
b1100 _"
1!
#150
0!
#155
b1110 -
b1110 Y"
b1110 \"
b1110 ]"
b1110 `"
b1101 .
b1101 K"
b1101 Q"
b1101 ^"
b1101 _"
1!
#160
0!
#165
b1111 -
b1111 Y"
b1111 \"
b1111 ]"
b1111 `"
b1110 .
b1110 K"
b1110 Q"
b1110 ^"
b1110 _"
1!
#170
0!
#175
b10000 -
b10000 Y"
b10000 \"
b10000 ]"
b10000 `"
b1111 .
b1111 K"
b1111 Q"
b1111 ^"
b1111 _"
1!
#180
0!
#185
b10001 -
b10001 Y"
b10001 \"
b10001 ]"
b10001 `"
b10000 .
b10000 K"
b10000 Q"
b10000 ^"
b10000 _"
1!
#190
0!
#195
b10010 -
b10010 Y"
b10010 \"
b10010 ]"
b10010 `"
b10001 .
b10001 K"
b10001 Q"
b10001 ^"
b10001 _"
1!
#200
0!
#205
b10011 -
b10011 Y"
b10011 \"
b10011 ]"
b10011 `"
b10010 .
b10010 K"
b10010 Q"
b10010 ^"
b10010 _"
1!
#210
0!
#215
b10100 -
b10100 Y"
b10100 \"
b10100 ]"
b10100 `"
b10011 .
b10011 K"
b10011 Q"
b10011 ^"
b10011 _"
1!
#220
0!
#222
