$date
	Sun Nov 19 23:18:03 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module rv32_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module c0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # w_alu_out_acc [31:0] $end
$var wire 32 $ w_pc_4_acc [31:0] $end
$var wire 32 % w_reg_data_A_exe [31:0] $end
$var wire 32 & w_reg_data_B_acc [31:0] $end
$var wire 32 ' w_reg_data_B_exe [31:0] $end
$var wire 1 ( w_sel_pc $end
$var wire 32 ) w_wr_back [31:0] $end
$var wire 2 * w_wb_sel [1:0] $end
$var wire 1 + w_sign $end
$var wire 32 , w_reg_data_B [31:0] $end
$var wire 32 - w_reg_data_A [31:0] $end
$var wire 1 . w_regWEn $end
$var wire 1 / w_pc_sel $end
$var wire 32 0 w_pc_exe [31:0] $end
$var wire 32 1 w_pc_de [31:0] $end
$var wire 32 2 w_pc_4_wb [31:0] $end
$var wire 32 3 w_pc_4 [31:0] $end
$var wire 32 4 w_pc [31:0] $end
$var wire 1 5 w_mem_rw $end
$var wire 32 6 w_instr_wb [31:0] $end
$var wire 32 7 w_instr_fetch [31:0] $end
$var wire 32 8 w_instr_exe [31:0] $end
$var wire 32 9 w_instr_de [31:0] $end
$var wire 32 : w_instr_acc [31:0] $end
$var wire 32 ; w_immediate [31:0] $end
$var wire 4 < w_imm_sel [3:0] $end
$var wire 32 = w_dmem_out_wb [31:0] $end
$var wire 32 > w_dmem_out [31:0] $end
$var wire 1 ? w_brUn $end
$var wire 1 @ w_brLT $end
$var wire 1 A w_brEq $end
$var wire 1 B w_b_sel $end
$var wire 1 C w_alu_zero_flag $end
$var wire 4 D w_alu_sel [3:0] $end
$var wire 32 E w_alu_out_wb [31:0] $end
$var wire 32 F w_alu_out [31:0] $end
$var wire 32 G w_alu_in_B [31:0] $end
$var wire 32 H w_alu_in_A [31:0] $end
$var wire 1 I w_a_sel $end
$scope module inst_access_ctl $end
$var wire 1 5 MemRW $end
$var wire 32 J alu_out_acc [31:0] $end
$var wire 1 ! clk $end
$var wire 32 K data_b_acc [31:0] $end
$var wire 32 L data_b_exe [31:0] $end
$var wire 32 M instr_acc [31:0] $end
$var wire 32 N pc_4_acc [31:0] $end
$var wire 1 " rst $end
$var wire 32 O pc_exe [31:0] $end
$var wire 32 P instruction [31:0] $end
$var wire 32 Q alu_out [31:0] $end
$var reg 32 R r_alu_out_acc [31:0] $end
$var reg 32 S r_data_b_acc [31:0] $end
$var reg 32 T r_instr_acc [31:0] $end
$var reg 1 U r_mem_wr $end
$var reg 32 V r_pc_4_acc [31:0] $end
$upscope $end
$scope module inst_alu $end
$var wire 1 + sign $end
$var wire 32 W i_2 [31:0] $end
$var wire 32 X i_1 [31:0] $end
$var wire 4 Y aluSel [3:0] $end
$var reg 32 Z r_operand_2_converted [31:0] $end
$var reg 32 [ result [31:0] $end
$var reg 1 C zero_flag $end
$upscope $end
$scope module inst_branch_comp $end
$var wire 1 A brEq $end
$var wire 1 @ brLT $end
$var wire 32 \ i_dataA [31:0] $end
$var wire 32 ] i_dataB [31:0] $end
$var wire 1 ? brUn $end
$var reg 1 ^ r_Eq $end
$var reg 1 _ r_LT $end
$upscope $end
$scope module inst_debug $end
$var wire 32 ` reg0 [31:0] $end
$var wire 32 a reg1 [31:0] $end
$var wire 32 b reg10 [31:0] $end
$var wire 32 c reg11 [31:0] $end
$var wire 32 d reg12 [31:0] $end
$var wire 32 e reg13 [31:0] $end
$var wire 32 f reg14 [31:0] $end
$var wire 32 g reg15 [31:0] $end
$var wire 32 h reg16 [31:0] $end
$var wire 32 i reg17 [31:0] $end
$var wire 32 j reg18 [31:0] $end
$var wire 32 k reg19 [31:0] $end
$var wire 32 l reg2 [31:0] $end
$var wire 32 m reg20 [31:0] $end
$var wire 32 n reg21 [31:0] $end
$var wire 32 o reg22 [31:0] $end
$var wire 32 p reg23 [31:0] $end
$var wire 32 q reg24 [31:0] $end
$var wire 32 r reg25 [31:0] $end
$var wire 32 s reg26 [31:0] $end
$var wire 32 t reg27 [31:0] $end
$var wire 32 u reg28 [31:0] $end
$var wire 32 v reg29 [31:0] $end
$var wire 32 w reg3 [31:0] $end
$var wire 32 x reg30 [31:0] $end
$var wire 32 y reg31 [31:0] $end
$var wire 32 z reg4 [31:0] $end
$var wire 32 { reg5 [31:0] $end
$var wire 32 | reg6 [31:0] $end
$var wire 32 } reg7 [31:0] $end
$var wire 32 ~ reg8 [31:0] $end
$var wire 32 !" reg9 [31:0] $end
$var wire 1 "" reg_9 $end
$var wire 1 #" reg_8 $end
$var wire 1 $" reg_7 $end
$var wire 1 %" reg_6 $end
$var wire 1 &" reg_5 $end
$var wire 1 '" reg_4 $end
$var wire 1 (" reg_31 $end
$var wire 1 )" reg_30 $end
$var wire 1 *" reg_3 $end
$var wire 1 +" reg_29 $end
$var wire 1 ," reg_28 $end
$var wire 1 -" reg_27 $end
$var wire 1 ." reg_26 $end
$var wire 1 /" reg_25 $end
$var wire 1 0" reg_24 $end
$var wire 1 1" reg_23 $end
$var wire 1 2" reg_22 $end
$var wire 1 3" reg_21 $end
$var wire 1 4" reg_20 $end
$var wire 1 5" reg_2 $end
$var wire 1 6" reg_19 $end
$var wire 1 7" reg_18 $end
$var wire 1 8" reg_17 $end
$var wire 1 9" reg_16 $end
$var wire 1 :" reg_15 $end
$var wire 1 ;" reg_14 $end
$var wire 1 <" reg_13 $end
$var wire 1 =" reg_12 $end
$var wire 1 >" reg_11 $end
$var wire 1 ?" reg_10 $end
$var wire 1 @" reg_1 $end
$var wire 1 A" reg_0 $end
$upscope $end
$scope module inst_decode_ctl $end
$var wire 1 ! clk $end
$var wire 4 B" immSel [3:0] $end
$var wire 32 C" pc [31:0] $end
$var wire 32 D" pc_de [31:0] $end
$var wire 1 " rst $end
$var wire 32 E" instruction [31:0] $end
$var wire 32 F" instr_de [31:0] $end
$var reg 32 G" r_instr_de [31:0] $end
$var reg 32 H" r_pc_de [31:0] $end
$upscope $end
$scope module inst_dmem $end
$var wire 1 ! clk $end
$var wire 32 I" dataW [31:0] $end
$var wire 32 J" i_addr [31:0] $end
$var wire 1 5 memRW $end
$var wire 32 K" o_data [31:0] $end
$var wire 1 " rst $end
$scope begin $ivl_for_loop0 $end
$var integer 32 L" i [31:0] $end
$upscope $end
$upscope $end
$scope module inst_execute_ctl $end
$var wire 1 A BrEq $end
$var wire 1 @ BrLT $end
$var wire 1 ? BrUn $end
$var wire 1 I a_sel $end
$var wire 4 M" alu_sel [3:0] $end
$var wire 1 B b_sel $end
$var wire 1 ! clk $end
$var wire 32 N" data_a_exe [31:0] $end
$var wire 32 O" data_b_exe [31:0] $end
$var wire 4 P" immSel [3:0] $end
$var wire 32 Q" instr_exe [31:0] $end
$var wire 32 R" instruction [31:0] $end
$var wire 32 S" pc_de [31:0] $end
$var wire 32 T" pc_exe [31:0] $end
$var wire 1 / pc_sel $end
$var wire 1 " rst $end
$var wire 1 + sign $end
$var wire 32 U" data_b [31:0] $end
$var wire 32 V" data_a [31:0] $end
$var reg 1 W" r_BrUn $end
$var reg 1 X" r_a_sel $end
$var reg 4 Y" r_alu_sel [3:0] $end
$var reg 1 Z" r_b_sel $end
$var reg 32 [" r_data_a_exe [31:0] $end
$var reg 32 \" r_data_b_exe [31:0] $end
$var reg 4 ]" r_immSel [3:0] $end
$var reg 32 ^" r_instr_exe [31:0] $end
$var reg 32 _" r_pc_exe [31:0] $end
$var reg 1 `" r_pc_sel $end
$var reg 1 a" r_sign $end
$upscope $end
$scope module inst_immGen $end
$var wire 4 b" immSel [3:0] $end
$var wire 32 c" immediate [31:0] $end
$var wire 25 d" instr [24:0] $end
$var reg 32 e" r_immediate [31:0] $end
$upscope $end
$scope module inst_mux2x1_A $end
$var wire 32 f" a [31:0] $end
$var wire 1 I sel $end
$var wire 32 g" b [31:0] $end
$var reg 32 h" y [31:0] $end
$upscope $end
$scope module inst_mux2x1_B $end
$var wire 32 i" a [31:0] $end
$var wire 32 j" b [31:0] $end
$var wire 1 B sel $end
$var reg 32 k" y [31:0] $end
$upscope $end
$scope module inst_mux3x1_wb $end
$var wire 2 l" sel [1:0] $end
$var wire 32 m" c [31:0] $end
$var wire 32 n" b [31:0] $end
$var wire 32 o" a [31:0] $end
$var reg 32 p" y [31:0] $end
$upscope $end
$scope module inst_pc $end
$var wire 1 ! clk $end
$var wire 32 q" in_alu [31:0] $end
$var wire 32 r" in_pc [31:0] $end
$var wire 32 s" instr_fetch [31:0] $end
$var wire 32 t" pc [31:0] $end
$var wire 32 u" pc_nxt [31:0] $end
$var wire 1 " rst $end
$var wire 1 ( sel_pc $end
$var reg 32 v" r_instr_fetch [31:0] $end
$var reg 32 w" w_pc [31:0] $end
$var reg 32 x" w_pc_nxt [31:0] $end
$upscope $end
$scope module inst_register $end
$var wire 5 y" addrA [4:0] $end
$var wire 5 z" addrB [4:0] $end
$var wire 5 {" addrD [4:0] $end
$var wire 1 ! clk $end
$var wire 32 |" dataA [31:0] $end
$var wire 32 }" dataB [31:0] $end
$var wire 32 ~" dataD [31:0] $end
$var wire 1 " rst $end
$var wire 1 . regWEn $end
$upscope $end
$scope module inst_wb_ctl $end
$var wire 32 !# alu_out_acc [31:0] $end
$var wire 32 "# alu_out_wb [31:0] $end
$var wire 1 ! clk $end
$var wire 32 ## dmem_out [31:0] $end
$var wire 32 $# dmem_out_wb [31:0] $end
$var wire 32 %# instruction [31:0] $end
$var wire 32 &# pc_4_acc [31:0] $end
$var wire 32 '# pc_4_wb [31:0] $end
$var wire 1 . regWEn $end
$var wire 1 " rst $end
$var wire 2 (# wb_sel [1:0] $end
$var wire 32 )# instr_wb [31:0] $end
$var reg 32 *# r_alu_out_wb [31:0] $end
$var reg 32 +# r_dmem_out_wb [31:0] $end
$var reg 32 ,# r_instr_wb [31:0] $end
$var reg 32 -# r_pc_4_wb [31:0] $end
$var reg 1 .# r_regWEn $end
$var reg 2 /# r_wb_sel [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /#
x.#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bz &#
bx %#
bx $#
bx ##
bx "#
bz !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bz j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
xa"
x`"
bx _"
bx ^"
bx ]"
bx \"
bx ["
xZ"
bx Y"
xX"
xW"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bz O"
bz N"
bx M"
b0 L"
bx K"
bz J"
bz I"
bx H"
bx G"
bx F"
bx E"
bx D"
bz C"
bz B"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
0_
0^
bz ]
bz \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
bx S
bx R
bx Q
bx P
bx O
bz N
bx M
bz L
bz K
bz J
xI
bx H
bx G
bx F
bx E
bx D
xC
xB
0A
0@
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
x.
bx -
bx ,
x+
bx *
bx )
z(
bz '
bz &
bz %
bz $
bz #
0"
0!
$end
#5
b0 ;
b0 c"
b0 i"
b0 e"
bz G
bz W
bz k"
bz 1
bz D"
bz S"
bz H"
0/
0`"
0?
0W"
b0 D
b0 Y
b0 M"
b0 Y"
b0 <
b0 P"
b0 b"
b0 ]"
0B
0Z"
0I
0X"
bz S
05
0U
bz E
bz n"
bz "#
bz *#
bz 2
bz o"
bz '#
bz -#
0.
0.#
b0 *
b0 l"
b0 (#
b0 /#
0C
0+
0a"
1!
#10
1("
0)"
1+"
0,"
1-"
0."
1/"
00"
11"
02"
13"
04"
16"
07"
18"
09"
1:"
0;"
1<"
0="
1>"
0?"
1""
0#"
1$"
0%"
1&"
0'"
1*"
05"
1@"
0A"
b0 {"
b10 H
b10 X
b10 h"
1C
b0 F
b0 Q
b0 [
b0 q"
b0 G
b0 W
b0 k"
b10 ,
b10 U"
b10 }"
b0 z"
b10 -
b10 V"
b10 g"
b10 |"
b0 y"
b0 d"
b110001 y
b110000 x
b101001 v
b101000 u
b100111 t
b100110 s
b100101 r
b100100 q
b100011 p
b100010 o
b100001 n
b100000 m
b11001 k
b11000 j
b10111 i
b10110 h
b10101 g
b10100 f
b10011 e
b10010 d
b10001 c
b10000 b
b1001 !"
b1000 ~
b111 }
b110 |
b101 {
b100 z
b11 w
b10 l
b1 a
b10 `
b0 6
b0 )#
b0 ,#
b0 :
b0 M
b0 %#
b0 T
b0 8
b0 P
b0 Q"
b0 ^"
b0 0
b0 O
b0 T"
b0 f"
b0 _"
x?
xW"
b110 D
b110 Y
b110 M"
b110 Y"
1B
1Z"
b0 9
b0 F"
b0 G"
b0 R"
b0 1
b0 D"
b0 S"
b0 H"
b0 7
b0 E"
b0 s"
b0 v"
b0 3
b0 r"
b0 u"
b0 x"
b0 4
b0 t"
b0 w"
0!
1"
#15
b10000000000 L"
1!
#20
0!
#22
0"
#25
0C
b0x0 F
b0x0 Q
b0x0 [
b0x0 q"
bz G
bz W
bz k"
b0 R
b100 V
b10 \"
b10 ["
0?
0W"
b0 D
b0 Y
b0 M"
b0 Y"
0B
0Z"
bz 1
bz D"
bz S"
bz H"
b1 3
b1 r"
b1 u"
b1 x"
1!
#30
0!
#35
b10 3
b10 r"
b10 u"
b10 x"
b1 4
b1 t"
b1 w"
bz 0
bz O
bz T"
bz f"
bz _"
b0x0 R
1!
#40
0!
#45
bx V
b101011000010110010011 7
b101011000010110010011 E"
b101011000010110010011 s"
b101011000010110010011 v"
b11 3
b11 r"
b11 u"
b11 x"
b10 4
b10 t"
b10 w"
1!
#50
0!
#55
b0x000x F
b0x000x Q
b0x000x [
b0x000x q"
b10001 H
b10001 X
b10001 h"
b1 ,
b1 U"
b1 }"
b1 z"
b10001 -
b10001 V"
b10001 g"
b10001 |"
b1011 y"
b10101100001011 d"
b0 7
b0 E"
b0 s"
b0 v"
b100 3
b100 r"
b100 u"
b100 x"
b11 4
b11 t"
b11 w"
b101011000010110010011 9
b101011000010110010011 F"
b101011000010110010011 G"
b101011000010110010011 R"
1!
#60
0!
#65
b10 H
b10 X
b10 h"
b10 F
b10 Q
b10 [
b10 q"
b0 G
b0 W
b0 k"
b10 ,
b10 U"
b10 }"
b0 z"
b10 -
b10 V"
b10 g"
b10 |"
b0 y"
b0 d"
b0x000x R
b101011000010110010011 8
b101011000010110010011 P
b101011000010110010011 Q"
b101011000010110010011 ^"
b1 \"
b10001 ["
1+
1a"
b11 D
b11 Y
b11 M"
b11 Y"
1B
1Z"
b1 <
b1 P"
b1 b"
b1 ]"
b0 9
b0 F"
b0 G"
b0 R"
b101 3
b101 r"
b101 u"
b101 x"
b100 4
b100 t"
b100 w"
1!
#70
0!
#75
b0x0 F
b0x0 Q
b0x0 [
b0x0 q"
bz G
bz W
bz k"
b110 3
b110 r"
b110 u"
b110 x"
b101 4
b101 t"
b101 w"
b0 8
b0 P
b0 Q"
b0 ^"
b10 \"
b10 ["
b0 D
b0 Y
b0 M"
b0 Y"
b0 <
b0 P"
b0 b"
b0 ]"
0B
0Z"
b101011000010110010011 :
b101011000010110010011 M
b101011000010110010011 %#
b101011000010110010011 T
b10 R
0+
0a"
1!
#80
0!
#85
b1011 {"
bz )
bz p"
bz ~"
b101011000010110010011 6
b101011000010110010011 )#
b101011000010110010011 ,#
1.
1.#
b1 *
b1 l"
b1 (#
b1 /#
b0 :
b0 M
b0 %#
b0 T
b0x0 R
b111 3
b111 r"
b111 u"
b111 x"
b110 4
b110 t"
b110 w"
1!
#90
0!
#95
b0 {"
bx )
bx p"
bx ~"
b1000 3
b1000 r"
b1000 u"
b1000 x"
b111 4
b111 t"
b111 w"
b0 6
b0 )#
b0 ,#
0.
0.#
b0 *
b0 l"
b0 (#
b0 /#
z>"
bz c
1!
#100
0!
#105
b1001 3
b1001 r"
b1001 u"
b1001 x"
b1000 4
b1000 t"
b1000 w"
1!
#110
0!
#115
b1010 3
b1010 r"
b1010 u"
b1010 x"
b1001 4
b1001 t"
b1001 w"
1!
#120
0!
#125
bx 7
bx E"
bx s"
bx v"
b1011 3
b1011 r"
b1011 u"
b1011 x"
b1010 4
b1010 t"
b1010 w"
1!
#130
0!
#135
bx F
bx Q
bx [
bx q"
bx H
bx X
bx h"
bx ,
bx U"
bx }"
bx z"
bx -
bx V"
bx g"
bx |"
bx y"
bx d"
b1100 3
b1100 r"
b1100 u"
b1100 x"
b1011 4
b1011 t"
b1011 w"
bx 9
bx F"
bx G"
bx R"
1!
#140
0!
#145
bx R
bx 8
bx P
bx Q"
bx ^"
bx \"
bx ["
b1101 3
b1101 r"
b1101 u"
b1101 x"
b1100 4
b1100 t"
b1100 w"
1!
#150
0!
#155
b1110 3
b1110 r"
b1110 u"
b1110 x"
b1101 4
b1101 t"
b1101 w"
bx :
bx M
bx %#
bx T
1!
#160
0!
#165
bx {"
bx 6
bx )#
bx ,#
b1111 3
b1111 r"
b1111 u"
b1111 x"
b1110 4
b1110 t"
b1110 w"
1!
#170
0!
#175
b10000 3
b10000 r"
b10000 u"
b10000 x"
b1111 4
b1111 t"
b1111 w"
1!
#180
0!
#185
b10001 3
b10001 r"
b10001 u"
b10001 x"
b10000 4
b10000 t"
b10000 w"
1!
#190
0!
#195
b10010 3
b10010 r"
b10010 u"
b10010 x"
b10001 4
b10001 t"
b10001 w"
1!
#200
0!
#205
b10011 3
b10011 r"
b10011 u"
b10011 x"
b10010 4
b10010 t"
b10010 w"
1!
#210
0!
#215
b10100 3
b10100 r"
b10100 u"
b10100 x"
b10011 4
b10011 t"
b10011 w"
1!
#220
0!
#222
