$date
	Sat Nov 18 00:38:30 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module rv32_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module c0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # w_brUn $end
$var wire 1 $ w_mem_rw $end
$var wire 1 % w_regWEn $end
$var wire 1 & w_sel_pc $end
$var wire 32 ' w_wr_back [31:0] $end
$var wire 2 ( w_wb_sel [1:0] $end
$var wire 1 ) w_sign $end
$var wire 32 * w_reg_data_B [31:0] $end
$var wire 32 + w_reg_data_A [31:0] $end
$var wire 1 , w_pc_sel $end
$var wire 32 - w_pc_4 [31:0] $end
$var wire 32 . w_pc [31:0] $end
$var wire 32 / w_instruction [31:0] $end
$var wire 32 0 w_immediate [31:0] $end
$var wire 4 1 w_imm_sel [3:0] $end
$var wire 32 2 w_dmem_out [31:0] $end
$var wire 1 3 w_brLT $end
$var wire 1 4 w_brEq $end
$var wire 1 5 w_b_sel $end
$var wire 1 6 w_alu_zero_flag $end
$var wire 4 7 w_alu_sel [3:0] $end
$var wire 32 8 w_alu_out [31:0] $end
$var wire 32 9 w_alu_in_B [31:0] $end
$var wire 32 : w_alu_in_A [31:0] $end
$var wire 1 ; w_a_sel $end
$var wire 1 < w_BrUn $end
$scope module inst_alu $end
$var wire 1 ) sign $end
$var wire 32 = i_2 [31:0] $end
$var wire 32 > i_1 [31:0] $end
$var wire 4 ? aluSel [3:0] $end
$var reg 32 @ r_operand_2_converted [31:0] $end
$var reg 32 A result [31:0] $end
$var reg 1 6 zero_flag $end
$upscope $end
$scope module inst_branch_comp $end
$var wire 1 4 brEq $end
$var wire 1 3 brLT $end
$var wire 1 # brUn $end
$var wire 32 B i_dataB [31:0] $end
$var wire 32 C i_dataA [31:0] $end
$var reg 1 D r_Eq $end
$var reg 1 E r_LT $end
$upscope $end
$scope module inst_control $end
$var wire 1 F BrEq $end
$var wire 1 $ MemRW $end
$var wire 1 % RegWEn $end
$var wire 1 4 brEq $end
$var wire 1 3 brLT $end
$var wire 1 G clk $end
$var wire 1 H rst $end
$var wire 32 I w_instr_wb [31:0] $end
$var wire 32 J w_instr_exe [31:0] $end
$var wire 32 K w_instr_acc [31:0] $end
$var wire 1 ) sign $end
$var wire 1 , pcSel $end
$var wire 32 L inst [31:0] $end
$var wire 2 M WBSel [1:0] $end
$var wire 4 N ImmSel [3:0] $end
$var wire 1 < BrUn $end
$var wire 1 5 BSel $end
$var wire 1 ; ASel $end
$var wire 4 O ALUSel [3:0] $end
$scope module inst_access_ctl $end
$var wire 1 $ MemRW $end
$var wire 1 G clk $end
$var wire 32 P instr_wb [31:0] $end
$var wire 1 H rst $end
$var wire 32 Q instruction [31:0] $end
$var reg 32 R r_instr_wb [31:0] $end
$var reg 1 S r_mem_wr $end
$upscope $end
$scope module inst_decode_ctl $end
$var wire 1 G clk $end
$var wire 4 T immSel [3:0] $end
$var wire 32 U instr_exe [31:0] $end
$var wire 1 H rst $end
$var wire 32 V instruction [31:0] $end
$var reg 4 W r_immSel [3:0] $end
$var reg 32 X r_instr_exe [31:0] $end
$upscope $end
$scope module inst_execute_ctl $end
$var wire 1 F BrEq $end
$var wire 1 3 BrLT $end
$var wire 1 < BrUn $end
$var wire 1 ; a_sel $end
$var wire 4 Y alu_sel [3:0] $end
$var wire 1 5 b_sel $end
$var wire 1 G clk $end
$var wire 32 Z instr_acc [31:0] $end
$var wire 32 [ instruction [31:0] $end
$var wire 1 , pc_sel $end
$var wire 1 H rst $end
$var wire 1 ) sign $end
$var reg 1 \ r_BrUn $end
$var reg 1 ] r_a_sel $end
$var reg 4 ^ r_alu_sel [3:0] $end
$var reg 1 _ r_b_sel $end
$var reg 32 ` r_instr_acc [31:0] $end
$var reg 1 a r_pc_sel $end
$var reg 1 b r_sign $end
$upscope $end
$scope module inst_wb_ctl $end
$var wire 1 G clk $end
$var wire 32 c instruction [31:0] $end
$var wire 1 H rst $end
$var wire 2 d wb_sel [1:0] $end
$var reg 2 e r_wb_sel [1:0] $end
$upscope $end
$upscope $end
$scope module inst_debug $end
$var wire 32 f reg0 [31:0] $end
$var wire 32 g reg1 [31:0] $end
$var wire 32 h reg10 [31:0] $end
$var wire 32 i reg11 [31:0] $end
$var wire 32 j reg12 [31:0] $end
$var wire 32 k reg13 [31:0] $end
$var wire 32 l reg14 [31:0] $end
$var wire 32 m reg15 [31:0] $end
$var wire 32 n reg16 [31:0] $end
$var wire 32 o reg17 [31:0] $end
$var wire 32 p reg18 [31:0] $end
$var wire 32 q reg19 [31:0] $end
$var wire 32 r reg2 [31:0] $end
$var wire 32 s reg20 [31:0] $end
$var wire 32 t reg21 [31:0] $end
$var wire 32 u reg22 [31:0] $end
$var wire 32 v reg23 [31:0] $end
$var wire 32 w reg24 [31:0] $end
$var wire 32 x reg25 [31:0] $end
$var wire 32 y reg26 [31:0] $end
$var wire 32 z reg27 [31:0] $end
$var wire 32 { reg28 [31:0] $end
$var wire 32 | reg29 [31:0] $end
$var wire 32 } reg3 [31:0] $end
$var wire 32 ~ reg30 [31:0] $end
$var wire 32 !" reg31 [31:0] $end
$var wire 32 "" reg4 [31:0] $end
$var wire 32 #" reg5 [31:0] $end
$var wire 32 $" reg6 [31:0] $end
$var wire 32 %" reg7 [31:0] $end
$var wire 32 &" reg8 [31:0] $end
$var wire 32 '" reg9 [31:0] $end
$var wire 1 (" reg_9 $end
$var wire 1 )" reg_8 $end
$var wire 1 *" reg_7 $end
$var wire 1 +" reg_6 $end
$var wire 1 ," reg_5 $end
$var wire 1 -" reg_4 $end
$var wire 1 ." reg_31 $end
$var wire 1 /" reg_30 $end
$var wire 1 0" reg_3 $end
$var wire 1 1" reg_29 $end
$var wire 1 2" reg_28 $end
$var wire 1 3" reg_27 $end
$var wire 1 4" reg_26 $end
$var wire 1 5" reg_25 $end
$var wire 1 6" reg_24 $end
$var wire 1 7" reg_23 $end
$var wire 1 8" reg_22 $end
$var wire 1 9" reg_21 $end
$var wire 1 :" reg_20 $end
$var wire 1 ;" reg_2 $end
$var wire 1 <" reg_19 $end
$var wire 1 =" reg_18 $end
$var wire 1 >" reg_17 $end
$var wire 1 ?" reg_16 $end
$var wire 1 @" reg_15 $end
$var wire 1 A" reg_14 $end
$var wire 1 B" reg_13 $end
$var wire 1 C" reg_12 $end
$var wire 1 D" reg_11 $end
$var wire 1 E" reg_10 $end
$var wire 1 F" reg_1 $end
$var wire 1 G" reg_0 $end
$upscope $end
$scope module inst_dmem $end
$var wire 1 ! clk $end
$var wire 32 H" i_addr [31:0] $end
$var wire 1 $ memRW $end
$var wire 32 I" o_data [31:0] $end
$var wire 1 " rst $end
$var wire 32 J" dataW [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 K" i [31:0] $end
$upscope $end
$upscope $end
$scope module inst_imem $end
$var wire 32 L" o_data [31:0] $end
$var wire 32 M" i_addr [31:0] $end
$upscope $end
$scope module inst_immGen $end
$var wire 4 N" immSel [3:0] $end
$var wire 32 O" immediate [31:0] $end
$var wire 25 P" instr [24:0] $end
$var reg 32 Q" r_immediate [31:0] $end
$upscope $end
$scope module inst_mux2x1_A $end
$var wire 1 ; sel $end
$var wire 32 R" b [31:0] $end
$var wire 32 S" a [31:0] $end
$var reg 32 T" y [31:0] $end
$upscope $end
$scope module inst_mux2x1_B $end
$var wire 32 U" a [31:0] $end
$var wire 1 5 sel $end
$var wire 32 V" b [31:0] $end
$var reg 32 W" y [31:0] $end
$upscope $end
$scope module inst_mux3x1_wb $end
$var wire 32 X" b [31:0] $end
$var wire 32 Y" c [31:0] $end
$var wire 2 Z" sel [1:0] $end
$var wire 32 [" a [31:0] $end
$var reg 32 \" y [31:0] $end
$upscope $end
$scope module inst_pc $end
$var wire 1 ! clk $end
$var wire 32 ]" in_alu [31:0] $end
$var wire 32 ^" in_pc [31:0] $end
$var wire 32 _" pc_nxt [31:0] $end
$var wire 1 " rst $end
$var wire 1 & sel_pc $end
$var wire 32 `" pc [31:0] $end
$var reg 32 a" w_pc [31:0] $end
$var reg 32 b" w_pc_nxt [31:0] $end
$upscope $end
$scope module inst_register $end
$var wire 5 c" addrA [4:0] $end
$var wire 5 d" addrB [4:0] $end
$var wire 5 e" addrD [4:0] $end
$var wire 1 ! clk $end
$var wire 32 f" dataA [31:0] $end
$var wire 32 g" dataB [31:0] $end
$var wire 32 h" dataD [31:0] $end
$var wire 1 % regWEn $end
$var wire 1 " rst $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
b0 K"
bx J"
bx I"
bx H"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bz c
xb
xa
bx `
x_
bx ^
x]
x\
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
xS
bx R
bx Q
bz P
bx O
bx N
bx M
bx L
bx K
bx J
bz I
zH
zG
zF
xE
xD
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
x<
x;
bx :
bx 9
bx 8
bx 7
x6
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
bx *
x)
bx (
bx '
z&
z%
z$
z#
0"
0!
$end
#5
1!
#10
b0 0
b0 O"
b0 U"
b0 Q"
03
0E
14
1D
b0 1
b0 N
b0 T
b0 N"
b0 W
1."
0/"
11"
02"
13"
04"
15"
06"
17"
08"
19"
0:"
1<"
0="
1>"
0?"
1@"
0A"
1B"
0C"
1D"
0E"
1("
0)"
1*"
0+"
1,"
0-"
10"
0;"
1F"
0G"
b10 *
b10 B
b10 J"
b10 V"
b10 g"
b0 d"
b10 +
b10 C
b10 R"
b10 f"
b0 c"
b1 e"
b1 P"
b110001 !"
b110000 ~
b101001 |
b101000 {
b100111 z
b100110 y
b100101 x
b100100 w
b100011 v
b100010 u
b100001 t
b100000 s
b11001 q
b11000 p
b10111 o
b10110 n
b10101 m
b10100 l
b10011 k
b10010 j
b10001 i
b10000 h
b1001 '"
b1000 &"
b111 %"
b110 $"
b101 #"
b100 ""
b11 }
b10 r
b1 g
b10 f
b0 -
b0 ["
b0 ^"
b0 _"
b0 b"
b10110011 /
b10110011 L
b10110011 V
b10110011 L"
b0 .
b0 M"
b0 S"
b0 `"
b0 a"
0!
1"
#15
b10000000000 K"
1!
#20
0!
#22
0"
#25
b1 -
b1 ["
b1 ^"
b1 _"
b1 b"
1!
#30
0!
#35
b100000 0
b100000 O"
b100000 U"
b100000 Q"
04
0D
b1 1
b1 N
b1 T
b1 N"
b1 W
b1000 +
b1000 C
b1000 R"
b1000 f"
b1000 c"
b101 e"
b1000000100000000101 P"
b10 -
b10 ["
b10 ^"
b10 _"
b10 b"
b10000001000000001010010011 /
b10000001000000001010010011 L
b10000001000000001010010011 V
b10000001000000001010010011 L"
b1 .
b1 M"
b1 S"
b1 `"
b1 a"
1!
#40
0!
#45
b11 -
b11 ["
b11 ^"
b11 _"
b11 b"
b10 .
b10 M"
b10 S"
b10 `"
b10 a"
1!
#50
0!
#55
13
1E
b0 0
b0 O"
b0 U"
b0 Q"
b10 1
b10 N
b10 T
b10 N"
b10 W
b1000 *
b1000 B
b1000 J"
b1000 V"
b1000 g"
b1000 d"
b10 +
b10 C
b10 R"
b10 f"
b10 c"
b0 e"
b10000001001000000 P"
b100 -
b100 ["
b100 ^"
b100 _"
b100 b"
b100000010010000000100011 /
b100000010010000000100011 L
b100000010010000000100011 V
b100000010010000000100011 L"
b11 .
b11 M"
b11 S"
b11 `"
b11 a"
1!
#60
0!
#65
03
0E
14
1D
b10 *
b10 B
b10 J"
b10 V"
b10 g"
b0 d"
b0 c"
b0 P"
b101 -
b101 ["
b101 ^"
b101 _"
b101 b"
b0 /
b0 L
b0 V
b0 L"
b100 .
b100 M"
b100 S"
b100 `"
b100 a"
1!
#70
0!
#75
b110 -
b110 ["
b110 ^"
b110 _"
b110 b"
b101 .
b101 M"
b101 S"
b101 `"
b101 a"
1!
#80
0!
#85
b111 -
b111 ["
b111 ^"
b111 _"
b111 b"
b110 .
b110 M"
b110 S"
b110 `"
b110 a"
1!
#90
0!
#95
b1000 -
b1000 ["
b1000 ^"
b1000 _"
b1000 b"
b111 .
b111 M"
b111 S"
b111 `"
b111 a"
1!
#100
0!
#105
b1001 -
b1001 ["
b1001 ^"
b1001 _"
b1001 b"
b1000 .
b1000 M"
b1000 S"
b1000 `"
b1000 a"
1!
#110
0!
#115
04
0D
b0xxxxxxxxxxxx 0
b0xxxxxxxxxxxx O"
b0xxxxxxxxxxxx U"
b0xxxxxxxxxxxx Q"
bx *
bx B
bx J"
bx V"
bx g"
bx d"
bx +
bx C
bx R"
bx f"
bx c"
bx e"
bx P"
b1010 -
b1010 ["
b1010 ^"
b1010 _"
b1010 b"
bx /
bx L
bx V
bx L"
b1001 .
b1001 M"
b1001 S"
b1001 `"
b1001 a"
1!
#120
0!
#125
b1011 -
b1011 ["
b1011 ^"
b1011 _"
b1011 b"
b1010 .
b1010 M"
b1010 S"
b1010 `"
b1010 a"
1!
#130
0!
#135
b1100 -
b1100 ["
b1100 ^"
b1100 _"
b1100 b"
b1011 .
b1011 M"
b1011 S"
b1011 `"
b1011 a"
1!
#140
0!
#145
b1101 -
b1101 ["
b1101 ^"
b1101 _"
b1101 b"
b1100 .
b1100 M"
b1100 S"
b1100 `"
b1100 a"
1!
#150
0!
#155
b1110 -
b1110 ["
b1110 ^"
b1110 _"
b1110 b"
b1101 .
b1101 M"
b1101 S"
b1101 `"
b1101 a"
1!
#160
0!
#165
b1111 -
b1111 ["
b1111 ^"
b1111 _"
b1111 b"
b1110 .
b1110 M"
b1110 S"
b1110 `"
b1110 a"
1!
#170
0!
#175
b10000 -
b10000 ["
b10000 ^"
b10000 _"
b10000 b"
b1111 .
b1111 M"
b1111 S"
b1111 `"
b1111 a"
1!
#180
0!
#185
b10001 -
b10001 ["
b10001 ^"
b10001 _"
b10001 b"
b10000 .
b10000 M"
b10000 S"
b10000 `"
b10000 a"
1!
#190
0!
#195
b10010 -
b10010 ["
b10010 ^"
b10010 _"
b10010 b"
b10001 .
b10001 M"
b10001 S"
b10001 `"
b10001 a"
1!
#200
0!
#205
b10011 -
b10011 ["
b10011 ^"
b10011 _"
b10011 b"
b10010 .
b10010 M"
b10010 S"
b10010 `"
b10010 a"
1!
#210
0!
#215
b10100 -
b10100 ["
b10100 ^"
b10100 _"
b10100 b"
b10011 .
b10011 M"
b10011 S"
b10011 `"
b10011 a"
1!
#220
0!
#222
